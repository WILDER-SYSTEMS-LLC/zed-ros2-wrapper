ARG UBUNTU_MAJOR=22
ARG UBUNTU_MINOR=04
ARG CUDA_MAJOR=12
ARG CUDA_MINOR=4
ARG CUDA_PATCH=1
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=1
ARG ZED_SDK_PATCH=0

ARG IMAGE_NAME=nvcr.io/nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-devel-ubuntu${UBUNTU_MAJOR}.${UBUNTU_MINOR}

FROM ${IMAGE_NAME}

ARG UBUNTU_MAJOR=22
ARG UBUNTU_MINOR=04
ARG CUDA_MAJOR=12
ARG CUDA_MINOR=4
ARG CUDA_PATCH=1
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=1
ARG ZED_SDK_PATCH=0

ARG ROS2_DIST=humble       # ROS2 distribution

ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility

ENV DEBIAN_FRONTEND=noninteractive

########### ROS2 ###########

ENV ROS_DISTRO=${ROS2_DIST}
# Install Dependencies for the ROS installation
RUN apt update && apt install -y --no-install-recommends \
    software-properties-common \
    curl

# Setup Sources
RUN add-apt-repository universe && \
  curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Install ROS 2 Development and Base packages
RUN apt update && apt install --no-install-recommends -y \
    ros-dev-tools \
    ros-humble-ros-core

# Initialize rosdep
RUN . /opt/ros/$ROS_DISTRO/setup.sh && rosdep init && rosdep update

########### ZED ###########

# Install Dependencies for the SDK installation
RUN apt update && apt install -y --no-install-recommends \
    curl \
    python3-pip \
    wget \
    zstd

# ZED SDK link
ENV ZED_SDK_URL="https://stereolabs.sfo2.cdn.digitaloceanspaces.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/ZED_SDK_Ubuntu${UBUNTU_MAJOR}_cuda${CUDA_MAJOR}.${CUDA_MINOR}_v${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}.${ZED_SDK_PATCH}.zstd.run"

# Check that this SDK exists
RUN echo "SDK link: $ZED_SDK_URL"
RUN if [ "$(curl -I "${ZED_SDK_URL}" -o /dev/null -s -w '%{http_code}\n' | head -n 1)" = "200" ]; then \
        echo "The URL points to something."; \
    else \
        echo "The URL does not point to a .run file or the file does not exist."; \
        exit 1; \
    fi

# Install the ZED SDK
RUN echo "CUDA Version $CUDA_VERSION" > /usr/local/cuda/version.txt

ENV ZED_RUN_FILE="ZED_SDK_Linux_Ubuntu.run"
RUN wget -q -O ${ZED_RUN_FILE} ${ZED_SDK_URL} && \
  chmod +x ${ZED_RUN_FILE} && \
  ./${ZED_RUN_FILE} -- silent skip_tools skip_cuda && \
  ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so && \
  rm -rf /usr/local/zed/resources/* && \
  rm -rf ${ZED_RUN_FILE}

# Install extra dependencies.
RUN apt update && apt install -y --no-install-recommends \
  libopencv-dev \
  libpng-dev \
  libpq-dev \
  usbutils

RUN pip3 install opencv-python-headless

########### COLCON BUILD ZED WRAPPER ###########

# Copy the sources in the Docker image
WORKDIR /root/ros2_ws/
COPY tmp_sources/ ./src/

# Install ROS dependencies
RUN apt update -y && rosdep update && \
  rosdep install --from-paths src --ignore-src -r -y && \
  rm -rf /var/lib/apt/lists/*

RUN /bin/sh -c ". /opt/ros/$ROS_DISTRO/setup.sh && \
  colcon build --parallel-workers $(nproc) --symlink-install \
  --event-handlers console_direct+ --base-paths src \
  --cmake-args '-DCMAKE_BUILD_TYPE=Release' \
  '-DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs' \
  '-DCMAKE_CXX_FLAGS=\"-Wl,--allow-shlib-undefined\"'"

# Set the default DDS middleware to FastRTPS for improved big data transmission
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# Setup environment variables
COPY ros_entrypoint.sh /sbin/ros_entrypoint.sh
ENTRYPOINT ["/sbin/ros_entrypoint.sh"]
CMD ["bash"]
